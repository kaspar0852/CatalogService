name: CI/CD Pipeline

on:
  workflow_dispatch:  # Manual trigger for the workflow
    inputs:
      tag:  # Input parameter for version or tag
        description: 'Provide the Docker tag (e.g., 1.0.0)'  # Text displayed in the UI
        required: true  # This input is mandatory
        default: 'latest'

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Extract Docker credentials directly from the secret
      - name: Extract Docker Credentials
        run: |
          export DOCKER_USERNAME=$(echo '${{ secrets.catalogsecrets }}' | jq -r '.DOCKER_USERNAME')
          export DOCKER_PASSWORD=$(echo '${{ secrets.catalogsecrets }}' | jq -r '.DOCKER_PASSWORD')
          export GOOGLE_CHAT_WEBHOOK_URL=$(echo '${{ secrets.catalogsecrets }}' | jq -r '.GOOGLE_CHAT_WEBHOOK_URL')

          echo "DOCKER_USERNAME=$DOCKER_USERNAME" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$DOCKER_PASSWORD" >> $GITHUB_ENV
          echo "GOOGLE_CHAT_WEBHOOK_URL=$GOOGLE_CHAT_WEBHOOK_URL" >> $GITHUB_ENV

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # Verify Docker Login
      - name: Verify Docker Login
        run: docker login -u "${{ env.DOCKER_USERNAME }}" -p "${{ env.DOCKER_PASSWORD }}"

      # Build and push the Docker image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            saugat0082/catalogservice:${{ github.event.inputs.tag }}

      # Notify Google Chat (Success)
      - name: Notify Google Chat (Success)
        if: success()  # Run only if the build succeeds
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"text\": \"✅ *Build Successful*: Docker image has been built and pushed successfully!\\nTag: \`${{ github.event.inputs.tag }}\`\"}" \
            ${{ env.GOOGLE_CHAT_WEBHOOK_URL }}

      # Notify Google Chat (Failure)
      - name: Notify Google Chat (Failure)
        if: failure()  # Run only if the build fails
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"text\": \"❌ *Build Failed*: There was an error building or pushing the Docker image.\\nPlease check the logs for details.\"}" \
            ${{ env.GOOGLE_CHAT_WEBHOOK_URL }}

      # # Deploy to Server
      # - name: Deploy to Server
      #   if: success()  # Deploy only if the build succeeds
      #   uses: appleboy/ssh-action@v0.1.8
      #   with:
      #     host: ${{ secrets.SERVER_IP }}
      #     username: ${{ secrets.SERVER_USER }}
      #     key: ${{ secrets.SERVER_SSH_KEY }}
      #     script: |
      #       # Pull the latest Docker image
      #       docker pull saugat0082/catalogservice:${{ github.event.inputs.tag }}

      #       # Stop the currently running container
      #       docker stop catalogservice || true
      #       docker rm catalogservice || true

      #       # Start a new container with the updated image
      #       docker run -d --name catalogservice -p 80:80 saugat0082/catalogservice:${{ github.event.inputs.tag }}
